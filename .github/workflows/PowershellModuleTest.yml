name: PowershellModuleTest

on: 
  push: # Triggers the workflow on push or pull request events but only for the given branches
    branches:
      [ main ]
    paths-ignore:
      - '*.txt'
  pull_request:
    branches:
      [ main ]
    paths-ignore:
      - '*.txt'

  workflow_dispatch:  # Allows you to run this workflow manually from the Actions tab

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: windows-latest  # ubuntu-latest 2021-12: Ubuntu-V20.04.3-LTS contains PowerShell-V7.2; alternatives: windows-latest (=WinServer2019), macos-latest(=macOS Catalina 10.15).
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it # 2021-12: to '/home/runner/work/MnCommonPsToolLib/MnCommonPsToolLib'
      - uses: actions/checkout@v2

      - name: Install PSScriptAnalyzer module from PSGallery
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer, SqlServer -ErrorAction Stop

      - name: Run PSScriptAnalyzer on all ps files - Check ps and make improving suggestions
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path . -Recurse -Outvariable issues -ExcludeRule PSAvoidUsingConvertToSecureStringWithPlainText, PSAvoidUsingUsernameAndPasswordParams, PSAvoidUsingPlainTextForPassword, PSAvoidUsingEmptyCatchBlock, PSAvoidUsingWriteHost, PSAvoidGlobalVars, PSUseDeclaredVarsMoreThanAssignments, PSAvoidUsingPositionalParameters;
          $nrOfErrors   = $issues.Where({$_.Severity -eq 'Error'  }).Count;
          $nrOfWarnings = $issues.Where({$_.Severity -eq 'Warning'}).Count;
          if( $nrOfErrors -gt 0){ Write-Error "There were total $nrOfErrors errors and $nrOfWarnings warnings." -ErrorAction Stop; }
          else                  { Write-Output "There were total $nrOfErrors errors and $nrOfWarnings warnings."; }

      - name: Check powershell module library exists
        shell: pwsh
        run: Test-Path "MnCommonPsToolLib/MnCommonPsToolLib.psm1" | Should -Be $true

      - name: Run UnitTest
        shell: pwsh
        run: |
          Write-Output "CurrentDir=`"$(PWD)`""; # "D:\a\MyRepo\MyRepo"
          Write-Output "GITHUB_WORKSPACE=`"$($env:GITHUB_WORKSPACE)`""; # "D:\a\MyRepo\MyRepo"
          Write-Output "PSModulePath=`"${env:PSModulePath}`""; # "C:\Users\runneradmin\Documents\PowerShell\Modules;C:\Program Files\PowerShell\Modules;c:\program files\powershell\7\Modules;C:\\Modules\azurerm_2.1.0;C:\\Modules\azure_2.1.0;C:\Users\packer\Documents\WindowsPowerShell\Modules;C:\Program Files\WindowsPowerShell\Modules;C:\Windows\system32\WindowsPowerShell\v1.0\Modules;C:\Program Files\Microsoft SQL Server\130\Tools\PowerShell\Modules\;C:\Program Files (x86)\Google\Cloud SDK\google-cloud-sdk\platform\PowerShell"
          [Environment]::SetEnvironmentVariable("PSModulePath","${env:PSModulePath};$(PWD)","Process"); # add ps module to path
          $Global:ErrorActionPreference = "Stop"; trap [Exception] { $Host.UI.WriteErrorLine($_); Read-Host; break; }
          Import-Module "MnCommonPsToolLib.psm1";
          Write-Output "OsPsVersion: $(OsPsVersion)"; # "7.2"
          Write-Output "MnCommonPsToolLibVersion: $Global:MnCommonPsToolLibVersion"; # "6.01"
          Write-Output "--------------------------------------------------------------------------------------";
          & "Examples/ExampleUseOfMnCommonPsToolLib01_HelloWorldWaitForEnter.ps1"; # waiting is aborted
          Write-Output "--------------------------------------------------------------------------------------";
          & "Examples/ExampleUseOfMnCommonPsToolLib02_StdBegAndEndInteractiveModeStmts.ps1"; # waiting is aborted
          Write-Output "--------------------------------------------------------------------------------------";
          & "Examples/ExampleUseOfMnCommonPsToolLib03_NoWaitAtEnd.ps1";
          Write-Output "--------------------------------------------------------------------------------------";
          & "Examples/ExampleUseOfMnCommonPsToolLib04_TestByReadOnlyMode.ps1";
          Write-Output "--------------------------------------------------------------------------------------";
          & "Examples/MnCommonPsToolLibScriptAnalyser.ps1";
          Write-Output "--------------------------------------------------------------------------------------";
          & "Examples/MnCommonPsToolLibUnitTest.ps1";
          Write-Output "--------------------------------------------------------------------------------------";
          Write-Output "Ok, UnitTest was successful!";
