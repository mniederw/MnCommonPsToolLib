name: PowershellModuleTest

 # Triggers the workflow on push or pull request events but only for the given branches (main) and ignore changes of *.txt files
on:
  push:
    branches:
      [ main, trunk ]
    paths-ignore:
      - '*.txt'
  pull_request:
    branches:
      [ main, trunk ]
    paths-ignore:
      - '*.txt'
  workflow_dispatch:  # Allows you to run this workflow manually from the Actions tab
  schedule:
    # cron: minute(0..59) hour(0..23) dayOfMonth(1..31) month(1..12 or JAN..DEC) dayOfWeek(0..6 or SUN-SAT); '* * * * *' seams to be 15min; 
    #   multivalues comma separated (2,4); ranges with a dash (2-5); increment with slash after min10 each 5 min (10/5); shortes are 5 minutes; in UTC;
    #   https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
    - cron:  '1 0 * * 0'  # 00:01 each sunday

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:

    runs-on: windows-latest
      # Available 2021-12:
      # - ubuntu-latest   = Ubuntu-V20.04.3-LTS contains PowerShell-V7.2
      # - windows-latest  = WinServer2022
      # - macos-latest    = macOS 11
      # - self-hosted     = own machine
      # More see: https://github.com/actions/virtual-environments/

#   strategy:
#     matrix:
#       node-version: [14.x]
#
#   if: github.ref == 'refs/heads/mybranch'

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout repository
        uses: actions/checkout@v2

#     - name: Install package manager pnpm
#       uses: pnpm/action-setup@v1.2.1
#       with:
#         version: 4.11.1

#     - name: Install node.js
#       uses: actions/setup-node@v1
#       with:
#         node-version: ${{ matrix.node-version }}
#         path: node_modules

#     - name: Install tools
#       run: |
#             pnpm install --global lodash

      # Default runners have installed: PS7 and Pester.
      # More about PS: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-powershell#powershell-module-locations
      - name: Install from PSGallery some modules as PSScriptAnalyzer and SqlServer
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted ;
          Install-Module PSScriptAnalyzer, SqlServer, ThreadJob -ErrorAction Stop ;

      - name: Run PSScriptAnalyzer on all ps files - Check ps and make improving suggestions
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path . -Recurse -Outvariable issues -ExcludeRule PSAvoidUsingConvertToSecureStringWithPlainText, PSAvoidUsingUsernameAndPasswordParams, PSAvoidUsingPlainTextForPassword, PSAvoidUsingEmptyCatchBlock, PSAvoidUsingWriteHost, PSAvoidGlobalVars, PSUseDeclaredVarsMoreThanAssignments, PSAvoidUsingPositionalParameters;
          $nrOfErrors   = $issues.Where({$_.Severity -eq 'Error'  }).Count;
          $nrOfWarnings = $issues.Where({$_.Severity -eq 'Warning'}).Count;
          [String] $msg = "There were total $nrOfErrors errors and $nrOfWarnings warnings.";
          if( $nrOfErrors -eq 0){ Write-Output $msg; }else{ Write-Error  $msg -ErrorAction Stop; }

      - name: Assert powershell module library exists
        shell: pwsh
        run: Test-Path "MnCommonPsToolLib/MnCommonPsToolLib.psm1" | Should -Be $true ;

      - name: Test all
        shell: pwsh
        run: |
          & "./TestAll.ps1";

# More docu: https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions
# For future: Run all *.Tests.ps1 recursively by using https://pester-docs.netlify.app/docs/commands/Invoke-Pester
# For future: Publish to Gallery: https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/
