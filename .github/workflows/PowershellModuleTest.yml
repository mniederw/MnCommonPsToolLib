name: PowershellModuleTest
env:
  destination_branch: "main"
run-name: "PowershellModuleTest on 3 platforms and create PR to main"

# Triggers the workflow on push or pull request events but only for the given branches and ignore changes of some file types.
on:
  push:
    branches:
      [ main, trunk ]
    paths-ignore:
      - '*.txt'
      - '*.md'
      - '.github/workflows/**'
  pull_request:
    branches:
      [ main, trunk ]
    paths-ignore:
      - '*.txt'
      - '*.md'
      - '.github/workflows/**'
  workflow_dispatch:  # Allows you to run this workflow manually from the Actions tab
  schedule:
    # cron: minute(0..59) hour(0..23) dayOfMonth(1..31) month(1..12 or JAN..DEC) dayOfWeek(0..6 or SUN-SAT);
    #   '* * * * *' seams to be 15min; multivalues comma separated (2,4); ranges with a dash (2-5); 
    #   increment with slash after min10 each 5 min (10/5); shortes are 5 minutes; in UTC;
    #   https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
    - cron:  '1 0 * * 0'  # 00:01 each sunday with main branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{matrix.os}} # run on multiple OS
    name: "${{github.job}}: ${{matrix.os}}: ${{github.ref_type}}=${{github.ref_name}} ${{github.event.repository.updated_at}}"
      # example: "Test: windows: branch=main 2021-12-31T23:59:59Z"
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Test all 
        shell: pwsh
          # Default runners have installed: PS7.2.5 and Pester.
          # More about PS: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-powershell#powershell-module-locations
        run: |
          echo "Running on OS=${{runner.os}}/${{env.imageos}}; $(which pwsh); $(pwsh --version)"; # example: "Linux/ubuntu22; /opt/microsoft/powershell/7/pwsh; Powershell V7.2.5"
          echo "List all environment variables in pwsh"; Get-Variable;
          & "./TestAll.ps1";
          echo "Test ok.";

  Merge:
    runs-on: ubuntu-latest
      # Available 2022-08:
      # - ubuntu-latest   = Ubuntu-V20.04.3-LTS contains PowerShell-V7.2.5, already installed /usr/bin/pwsh
      # - windows-latest  = WinServer2022
      # - macos-latest    = macOS 11
      # - self-hosted     = own machine
      # - More see: https://github.com/actions/virtual-environments/
    name: "Merge to ${{destination_branch}} if all unittests are ok"
    needs: [test]
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, see https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Show environment variables of bash
        shell: bash
        run: |
          echo "Running on OS=${{runner.os}}/${{env.imageos}}; $(which pwsh); $(pwsh --version)"; # example: "Linux; /usr/bin/pwsh; Powershell V7.2.5"
          echo "Repo        = ${{github.repository}};" # example: "mniederw/MnCommonPsToolLib"
          echo "Actor       = ${{github.actor}};"      # example: "mniederw"
          echo "EventName   = ${{github.event_name}};" # example: "schedule","push"
          echo "ActionUrl   = https://github.com/${{github.repository}}/actions/runs/${{github.run_id}};" # example: "https://github.com/mniederw/MnCommonPsToolLib/actions/runs/4272755554"
          echo "Action      = ${{github.workflow}} #${{github.run_number}};" # example: "PowershellModuleTest #570"
          echo "WorkflowRef = ${{github.workflow_ref}};" # example: "mniederw/MnCommonPsToolLib/.github/workflows/PowershellModuleTest.yml@refs/heads/main"
          # More usuful variables: 
          #   RUNNER_WORKSPACE        = /home/runner/work/MnCommonPsToolLib
          #   GITHUB_WORKSPACE        = /home/runner/work/MnCommonPsToolLib/MnCommonPsToolLib
          #   RUNNER_TEMP             = /home/runner/work/_temp
          #   GITHUB_ENV              = /home/runner/work/_temp/_runner_file_commands/set_env_dddaeb53-3cd8-4be8-b76c-5fa50a64656c
          #   GITHUB_OUTPUT           = /home/runner/work/_temp/_runner_file_commands/set_output_dddaeb53-3cd8-4be8-b76c-5fa50a64656c
          #   GITHUB_STEP_SUMMARY     = /home/runner/work/_temp/_runner_file_commands/step_summary_dddaeb53-3cd8-4be8-b76c-5fa50a64656c
          #   INVOCATION_ID           = 765a5a77e7694d118c0feadb5fdc152d
          echo "List all environment variables in bash"; printenv;

      - name: If tests on trunk of a push were successful then create pull request to destination branch
        if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/trunk' && runner.os == 'Linux' }}
        uses: repo-sync/pull-request@v2.6.2  # see: https://github.com/repo-sync/pull-request  works only on linux
        with:
          pr_title: "Merge ${{github.ref_name}} to ${{destination_branch}} - Unittests are successful - ${{ github.event.commits[0].message }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Output job state
        # if: ${{ ! success() }}
        run: echo "Process ${{ job.status }}."; # job.status = [success,failure,cancelled].



# More docu: https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions
# For future:
#   strategy:
#     matrix:
#       node-version: [14.x]
#   if: github.ref == 'refs/heads/mybranch'
#   - name: Install package manager pnpm
#     uses: pnpm/action-setup@v1.2.1
#     with:
#       version: 4.11.1
#   - name: Install node.js
#     uses: actions/setup-node@v3                 # puts node and npm into path
#     with:
#       node-version: ${{ matrix.node-version }}
#       path: node_modules
#   - shell: bash
#     run: |
#           echo "Inputtags: ${{ github.event.inputs.tag }}"
#           echo "BranchRef: ${{github.ref}}"; # ex: "refs/heads/main"
#           BranchName=$(echo "${{github.ref}}" | cut --delimiter=/ --fields=3- -); # ex: "main"
#           BranchEnv="";
#           if   [[ "$BranchName" == "main"  ]]; then BranchEnv="MAIN"; 
#           elif [[ "$BranchName" == "trunk" ]]; then BranchEnv="ENV1"; 
#                                                else BranchEnv="UNKN-$BranchName"; fi;
#           echo "Run BranchEnv=$BranchEnv BranchName=$BranchName BranchRef=${{github.ref}}";
#           #
#           m="^main$"   ; if [[ "$BranchName" =~ $m ]]; then BranchEnv="ENV2" ; fi;
#           m="^main.*$" ; 
#           if [[ "$BranchName" =~ $m ]]; then BranchEnv="ENV2" ; fi;
#           echo "Run SfEnv=$SfEnv BranchName=$BranchName BranchRef=${{github.ref}}";
#           #
#           if [[ $BranchEnv == "MAIN" ]]; then
#             echo "MAIN";
#           elif [[ $BranchEnv == "ENV1" ]]; then
#             echo "ENV1";
#           else echo "Expected BranchEnv=$BranchEnv is one of [MAIN,ENV1]"; exit 1; fi;
# For future: Run all *.Tests.ps1 recursively by using https://pester-docs.netlify.app/docs/commands/Invoke-Pester
# For future: Publish to Gallery: https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/
# For future: pnpm install --global lodash;
# For future: autocommit
#   uses: peter-evans/create-pull-request@v4.0.4  # see: https://github.com/peter-evans/create-pull-request
#     with:
#       title: 'Merge trunk to main and commit it - ${{ github.event.commits[0].message }}'
#       body: 'Autogenerated PR and committed from trunk to main'
# For future: alternative - same as repo-sync/pull-request@v2.6.2 but with another tool:
#   uses: vsoch/pull-request-action@1.0.19  # see https://github.com/vsoch/pull-request-action  works only on linux
#     env:
#       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       PULL_REQUEST_BRANCH: "main"
#       PULL_REQUEST_TITLE: "Merge trunk to main - ${{ github.event.commits[0].message }}"
#       PASS_IF_EXISTS:
#       CI: true
# For future: cache: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-powershell
# For future: query gh https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows
# For future: checking matrix context
#   if: matrix.os == 'ubuntu-latest'
#   if: matrix.os == 'windows-latest'
#   if: matrix.os == 'macOS-latest'
# For future: checking runner context
#   if: runner.os == 'Linux'
#   if: runner.os == 'Windows'
#   if: runner.os == 'macOS'
# For future: checking runner variable:
#   if [ "$RUNNER_OS" == "Linux" ]; then
# For future:
#   run: |
#        git config --local user.name github-actions
#        git config --local user.email "actions@github.com"
#        git add dir1/*
#        git commit -am "Autocommit $(date)"
#        git push origin main --force
#      env:
#        REPO_KEY: ${{secrets.GITHUB_TOKEN}}
#        username: github-actions
